package com.shunproduct.scheduleboard.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.*;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.shunproduct.scheduleboard.util.Role;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Configuration
@EnableWebSecurity
public class SecurityConfig {

	private final UserDetailsService userDetailsService;

	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	public void configure(WebSecurity web) throws Exception {
		// 「/js/**」を追加
		web.ignoring().antMatchers("/js/**", "/css/**", "/webjars/**");
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
				// 認証リクエストの設定
				.authorizeRequests()
				// 「/register」を追加
				.antMatchers("/login", "/register", "/error").permitAll()
				// 「/admin」は、ADMINユーザだけアクセス可能にします
				.antMatchers("/admin/**").hasRole(Role.ADMIN.getRoleName())
				// 「/login」をアクセス可能にします
				.anyRequest().authenticated().and()
				// フォームベース認証の設定
				.formLogin()
				// ログイン時のURLを指定
				.loginPage("/login")
				// 認証後にリダイレクトする場所を指定
				.defaultSuccessUrl("/").and().logout()
				// .defaultSuccessUrl("/").and().logout()
				// ログアウト時のURLを指定
				.logoutRequestMatcher(new AntPathRequestMatcher("/logout")).and()
				// Remember-Meの認証を許可します
				// これを設定すると、ブラウザを閉じて、再度開いた場合でも「ログインしたまま」にできます
				.rememberMe();
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		// userDetailsServiceを使用して、DBからユーザを参照できるようにします
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
	}

	// WebSecurityConfigurerAdapterのインスタンスを作成。@Orderアノテーションで読み込む順番を設定。
	// 参考 https://qiita.com/kanemotos/items/fbb130ef80653b782592
	@Configuration
	@Order(1)
	public static class ApiWebSecurityConfigurationAdapter extends WebSecurityConfigurerAdapter {
		protected void configure(HttpSecurity http) throws Exception {
			// 「"/contents/embed/**"」のように、適用したいURLを指定する。
			// 今回はヘッダ設定無しにしたかったので、「.headers().frameOptions().disable()」とした。
			// 「.headers().frameOptions().sameOrigin()」などの設定もあるので、調べてみてください。
			http.antMatcher("/add-schedule/**").headers().frameOptions().sameOrigin();
		}
	}

}
